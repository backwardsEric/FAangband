name: create-github-release

on:
  push:
    branches: [ release-1-4-5 ]

env:
    # Used as the name when uploading or downloading the artifact for passing
    # configuration data from the Setup job to those dependent on it.
    CONFIG_ARTIFACT: release-config
    # Used as the path for the file with the configuration data passed from
    # the Setup job to those dependent on it.
    CONFIG_ARTIFACT_PATH: release-config.txt
    # Used as the name when uploading or downloading the artifact for passing
    # the name of the source archive.
    SRC_ARTIFACT: release-src
    # Used as the path for the file with the name of the source archive in it.
    SRC_ARTIFACT_PATH: release-src.txt
    # Used as the name when uploading or downloading the artifact holding
    # the source archive.
    SRC_ARCHIVE_ARTIFACT: release-src-archive
    # Used as the name when uploading or downloading the artifact for passing
    # the name of the Windows archive.
    WIN_ARTIFACT: release-win
    # Used as the path for the file with the name of the Windows archive in it.
    WIN_ARTIFACT_PATH: release-win.txt
    # Used as the name when uploading or downloading the artifact holding
    # the Windows archive.
    WIN_ARCHIVE_ARTIFACT: release-win-archive
    # Used as the name when uploading or downloading the artifact for passing
    # the name of the Mac archive.
    MAC_ARTIFACT: release-mac
    # Used as the path for the file with the name of the Mac archive in it.
    MAC_ARTIFACT_PATH: release-mac.txt
    # Used as the name when uploading or downloading the artifact holding
    # the Mac archive.
    MAC_ARCHIVE_ARTIFACT: release-mac-archive

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      # Need commit history and tags for scripts/version.sh to work as expected
      # so use 0 for fetch-depth.
      - name: Clone Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Names from Makefile
        id: get_names
        run: |
          name=`sed -E -n -e 's/^[[:blank:]]*NAME[[:blank:]]+=[[:blank:]]+//p' src/Makefile.src | tr ' #' '\t\t' | tail -1 | cut -f 1`
          echo "name=$name" >> $GITHUB_OUTPUT
          prog=`sed -E -n -e 's/^[[:blank:]]*PROG[[:blank:]]+=[[:blank:]]+//p' src/Makefile.src | tr ' #' '\t\t' | tail -1 | cut -f 1`
          echo "prog=$prog" >> $GITHUB_OUTPUT

      - name: Set Release Version
        id: get_release_vars
        run: |
          version=`scripts/version.sh`
          echo "version=$version" >> $GITHUB_OUTPUT
          prerelease=`echo $version | awk '/^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/ { print "false" ; exit 0 } ; { print "true"; exit 0 } ;'`
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
          # Mark anything that isn't a prerelease as a draft.
          draft=true
          if test x$prerelease = xtrue ; then
              draft=false
          fi
          echo "draft=$draft" >> $GITHUB_OUTPUT

      # The quoting here may be too simple-minded:  what if there are single
      # quotes in the steps.*.outputs.* stuff.
      - name: Create Artifact with Configuration Details
        run: |
          echo name= '${{ steps.get_names.outputs.name }}' > $CONFIG_ARTIFACT_PATH
          echo prog= '${{ steps.get_names.outputs.prog }}' >> $CONFIG_ARTIFACT_PATH
          echo version= '${{ steps.get_release_vars.outputs.version }}' >> $CONFIG_ARTIFACT_PATH
          echo prerelease= '${{ steps.get_release_vars.outputs.prerelease }}' >> $CONFIG_ARTIFACT_PATH
          echo draft= '${{ steps.get_release_vars.outputs.draft }}' >> $CONFIG_ARTIFACT_PATH

      - name: Upload Artifact for Use by Dependent Steps
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CONFIG_ARTIFACT }}
          path: ${{ env.CONFIG_ARTIFACT_PATH }}
          retention-days: 1

  source:
    needs: setup
    name: Source Archive
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact with Configuration Information
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CONFIG_ARTIFACT }}

      - name: Extract Configuration Information and Store in Step Outputs
        id: store_config
        run: |
          name=`sed -E -n -e 's/name= //p' $CONFIG_ARTIFACT_PATH`
          echo "name=$name" >> $GITHUB_OUTPUT
          prog=`sed -E -n -e 's/prog= //p' $CONFIG_ARTIFACT_PATH`
          echo "prog=$prog" >> $GITHUB_OUTPUT
          version=`sed -E -n -e 's/version= //p' $CONFIG_ARTIFACT_PATH`
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install automake autoconf git make

      # Need commit history and tags for scripts/version.sh to work as expected
      # so use 0 for fetch-depth.
      - name: Clone Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Source Archive
        id: create_source_archive
        run: |
          ./autogen.sh
          ./configure
          archive_prefix=${{ steps.store_config.outputs.name }}-${{ steps.store_config.outputs.version }}
          echo "archive_file=${archive_prefix}.tar.gz" >> $GITHUB_OUTPUT
          git checkout-index --prefix="$archive_prefix"/ -a
          scripts/version.sh > "$archive_prefix"/version
          "$archive_prefix"/autogen.sh
          rm -rf "$archive_prefix"/autogen.sh "$archive_prefix"/autom4te.cache
          tar --exclude .gitignore --exclude .github -czvf "$archive_prefix".tar.gz "$archive_prefix"
          rm -rf "$archive_prefix"

      - name: Create Artifact with Source Archive Path
        run: |
          echo archive_path= '${{ steps.create_source_archive.outputs.archive_file }}' > $SRC_ARTIFACT_PATH

      - name: Upload Artifact with Source Archive Path
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SRC_ARTIFACT }}
          path: ${{ env.SRC_ARTIFACT_PATH }}
          retention-days: 1

      - name: Upload Source Archive as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SRC_ARCHIVE_ARTIFACT }}
          path: ${{ steps.create_source_archive.outputs.archive_file }}
          retention-days: 1

  windows:
    needs: [setup]
    name: Windows
    runs-on: ubuntu-22.04
    steps:
      - name: Download Artifact with Configuration Information
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CONFIG_ARTIFACT }}

      - name: Extract Configuration Information and Store in Step Outputs
        id: store_config
        run: |
          name=`sed -E -n -e 's/name= //p' $CONFIG_ARTIFACT_PATH`
          echo "name=$name" >> $GITHUB_OUTPUT
          prog=`sed -E -n -e 's/prog= //p' $CONFIG_ARTIFACT_PATH`
          echo "prog=$prog" >> $GITHUB_OUTPUT
          version=`sed -E -n -e 's/version= //p' $CONFIG_ARTIFACT_PATH`
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gcc-mingw-w64 automake autoconf git make zip

      # Need commit history and tags for scripts/version.sh to work as expected
      # so use 0 for fetch-depth.
      - name: Clone Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Override the default CFLAGS, -g -O2, to get a smaller executable (~2
      # MB versus ~7 MB), all due to compiling without debugging symbols.
      # Adding the option to strip symbols and relocation information, -s,
      # or the option to optimize for size, -Os, didn't further reduce the
      # size of the executable when using mingw 6.0.0 on Debian buster.
      - name: Create Windows Archive
        id: create_windows_archive
        run: |
          ./autogen.sh
          env CFLAGS="-O2" ./configure --disable-curses --enable-win --build=i686-pc-linux-gnu --host=i686-w64-mingw32
          make
          cp src/${{ steps.store_config.outputs.prog }}.exe src/win/dll/libpng12.dll src/win/dll/zlib1.dll .
          archive_prefix=${{ steps.store_config.outputs.name }}-${{ steps.store_config.outputs.version }}
          echo "archive_file=${archive_prefix}-win.zip" >> $GITHUB_OUTPUT
          scripts/pkg_win $archive_prefix ${archive_prefix}-win.zip

      - name: Create Artifact with Windows Archive Path
        run: |
          echo archive_path= '${{ steps.create_windows_archive.outputs.archive_file }}' > $WIN_ARTIFACT_PATH

      - name: Upload Artifact with Windows Archive Path
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WIN_ARTIFACT }}
          path: ${{ env.WIN_ARTIFACT_PATH }}
          retention-days: 1

      - name: Upload Windows Archive as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WIN_ARCHIVE_ARTIFACT }}
          path: ${{ steps.create_windows_archive.outputs.archive_file }}
          retention-days: 1

  mac:
    needs: [setup]
    name: Mac
    runs-on: macos-latest
    steps:
      - name: Download Artifact with Configuration Information
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CONFIG_ARTIFACT }}

      - name: Extract Configuration Information and Store in Step Outputs
        id: store_config
        run: |
          name=`sed -E -n -e 's/name= //p' $CONFIG_ARTIFACT_PATH`
          echo "name=$name" >> $GITHUB_OUTPUT
          prog=`sed -E -n -e 's/prog= //p' $CONFIG_ARTIFACT_PATH`
          echo "prog=$prog" >> $GITHUB_OUTPUT
          version=`sed -E -n -e 's/version= //p' $CONFIG_ARTIFACT_PATH`
          echo "version=$version" >> $GITHUB_OUTPUT

      # Need commit history and tags for scripts/version.sh to work as expected
      # so use 0 for fetch-depth.
      - name: Clone Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # An SDK that supports building x86_64 and arm64 objects is currently
      # necessary unless the default list of architectures, ARCHS, in
      # Makefile.osx is overridden.  If the default SDK does not handle that,
      # setting SDKROOT to point to an installed SDK that does would be one
      # workaround.
      - name: Create Mac Archive
        id: create_mac_archive
        run: |
          cd src
          env OPT="-O2 -DNDEBUG" make -f Makefile.osx dist
          archive_prefix=${{ steps.store_config.outputs.name }}-${{ steps.store_config.outputs.version }}-osx
          echo "archive_file=${archive_prefix}.dmg" >> $GITHUB_OUTPUT

      - name: Create Artifact with Mac Archive Path
        run: |
          echo archive_path= '${{ steps.create_mac_archive.outputs.archive_file }}' > $MAC_ARTIFACT_PATH

      - name: Upload Artifact with Mac Archive Path
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MAC_ARTIFACT }}
          path: ${{ env.MAC_ARTIFACT_PATH }}
          retention-days: 1

      - name: Upload Mac Archive as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MAC_ARCHIVE_ARTIFACT }}
          path: ${{ steps.create_mac_archive.outputs.archive_file }}
          retention-days: 1

  release:
    needs: [ setup, source, windows, mac ]
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact with Configuration Information
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CONFIG_ARTIFACT }}

      - name: Extract Configuration Information and Store in Step Outputs
        id: store_config
        run: |
          version=`sed -E -n -e 's/version= //p' $CONFIG_ARTIFACT_PATH`
          echo "version=$version" >> $GITHUB_OUTPUT
          prerelease=`sed -E -n -e 's/prerelease= //p' $CONFIG_ARTIFACT_PATH`
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
          draft=`sed -E -n -e 's/draft= //p' $CONFIG_ARTIFACT_PATH`
          echo "draft=$draft" >> $GITHUB_OUTPUT

      - name: Download Artifact with Source Archive Path
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.SRC_ARTIFACT }}

      - name: Extract Source Archive Path and Store in Step Outputs
        id: store_src
        run: |
          archive_path=`sed -E -n -e 's/archive_path= //p' $SRC_ARTIFACT_PATH`
          echo "archive_path=$archive_path" >> $GITHUB_OUTPUT

      - name: Download Artifact with Source Archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.SRC_ARCHIVE_ARTIFACT }}

      - name: Download Artifact with Windows Archive Path
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WIN_ARTIFACT }}

      - name: Extract Windows Archive Path and Store in Step Outputs
        id: store_win
        run: |
          archive_path=`sed -E -n -e 's/archive_path= //p' $WIN_ARTIFACT_PATH`
          echo "archive_path=$archive_path" >> $GITHUB_OUTPUT

      - name: Download Artifact with Windows Archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WIN_ARCHIVE_ARTIFACT }}

      - name: Download Artifact with Mac Archive Path
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MAC_ARTIFACT }}

      - name: Extract Mac Archive Path and Store in Step Outputs
        id: store_mac
        run: |
          archive_path=`sed -E -n -e 's/archive_path= //p' $MAC_ARTIFACT_PATH`
          echo "archive_path=$archive_path" >> $GITHUB_OUTPUT

      - name: Download Artifact with Mac Archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.MAC_ARCHIVE_ARTIFACT }}

      - name: Download Artifact with Nintendo 3DS Archive Path
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NIN_3DS_ARTIFACT }}

      - name: Extract Nintendo 3DS Archive Path and Store in Step Outputs
        id: store_3ds
        run: |
          archive_path=`sed -E -n -e 's/archive_path= //p' $NIN_3DS_ARTIFACT_PATH`
          echo "archive_path=$archive_path" >> $GITHUB_OUTPUT

      - name: Download Artifact with Nintendo 3DS Archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NIN_3DS_ARCHIVE_ARTIFACT }}

      - name: Download Artifact with Nintendo DS Archive Path
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NIN_DS_ARTIFACT }}

      - name: Extract Nintendo DS Archive Path and Store in Step Outputs
        id: store_ds
        run: |
          archive_path=`sed -E -n -e 's/archive_path= //p' $NIN_DS_ARTIFACT_PATH`
          echo "archive_path=$archive_path" >> $GITHUB_OUTPUT

      - name: Download Artifact with Nintendo DS Archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NIN_DS_ARCHIVE_ARTIFACT }}

      - name: Populate Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.store_config.outputs.version }}
          name: ${{ steps.store_config.outputs.version }}
          target_commitish: ${{ github.sha }}
          draft: ${{ steps.store_config.outputs.draft }}
          prerelease: ${{ steps.store_config.outputs.prerelease }}
          files: |
            ${{ steps.store_src.outputs.archive_path }}
            ${{ steps.store_win.outputs.archive_path }}
            ${{ steps.store_mac.outputs.archive_path }}
            ${{ steps.store_3ds.outputs.archive_path }}
            ${{ steps.store_ds.outputs.archive_path }}
          token: ${{ secrets.GITHUB_TOKEN }}
